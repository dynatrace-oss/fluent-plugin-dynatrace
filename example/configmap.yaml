apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-configuration
  namespace: dynatrace
data:
  CLUSTER_ID: "${YOUR_CLUSTER_ID}"
  AG_INGEST_URL: "https://fluentd-activegate:9999/e/${YOUR_ENVIRONMENT_ID}/api/v2/logs/ingest"
  fluent.conf: |
    <label @FLUENT_LOG>
        <match fluent.**>
            @type stdout
        </match>
    </label>

    <source>
        @type tail
        path /var/log/containers/*.log
        pos_file /var/log/fluentd.pos
        tag kubernetes.*
        <parse>
            @type json
        </parse>
        refresh_interval 60
        read_lines_limit 1000
        encoding UTF-8
    </source>

    <match kubernetes.var.log.containers.**kube-logging**.log>
        @type null
    </match>

    <match kubernetes.var.log.containers.**kube-system**.log>
        @type null
    </match>

    <match kubernetes.var.log.containers.**monitoring**.log>
        @type null
    </match>

    <match kubernetes.var.log.containers.**infra**.log>
        @type null
    </match>

    <match kubernetes.var.log.containers.**fluent**.log>
        @type null
    </match>

    <filter kubernetes.**>
        @type kubernetes_metadata
    </filter>

    <filter kubernetes.**>
        @type record_transformer
        enable_ruby true
        <record>
            status ${ record.dig(:log, :severity) || record.dig(:log, :level) || (record["log"] =~ /\W?\berror\b\W?/i ? "ERROR" : (record["log"] =~ /\W?\bwarn\b\W?/i ? "WARN" : (record["log"] =~ /\W?\bdebug\b\W?/i ? "DEBUG" : (record["log"] =~ /\W?\binfo\b\W?/i ? "INFO" : "NONE")))) }
            content ${record["log"]}
            container.name ${record.dig("kubernetes","container_name")}
            container.image.name ${record.dig("kubernetes","container_image").split(':')[0]}
            container.image.tag ${record.dig("kubernetes","container_image").split(':')[1]}
            dt.kubernetes.node.name ${record.dig("kubernetes","host")}
            dt.kubernetes.cluster.id "#{ENV['CLUSTER_ID']}"
            dt.kubernetes.node.system_uuid ${File.read("/sys/devices/virtual/dmi/id/product_uuid").strip}
            k8s.pod.labels ${record["kubernetes"]["labels"]}
            k8s.namespace.uid ${record["kubernetes"]["namespace_id"]}
            k8s.namespace.name ${record.dig("kubernetes","namespace_name")}
            k8s.pod.name ${record.dig("kubernetes","pod_name")}
            k8s.pod.uid ${record.dig("kubernetes","pod_id")}
        </record>
        remove_keys log, stream, docker, kubernetes
    </filter>

    <match kubernetes.**>
      @type dynatrace
      active_gate_url "#{ENV['AG_INGEST_URL']}"
      api_token "#{ENV['LOG_INGEST_TOKEN']}"
      ssl_verify_none    true
      <buffer>
        chunk_limit_size 1048576
        retry_max_times 3
      </buffer>
    </match>

    <system>
        log_level debug
    </system>